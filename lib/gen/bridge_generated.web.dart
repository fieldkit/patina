// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_add_or_update_portal_station(
      AddOrUpdatePortalStation raw) {
    return [
      api2wire_String(raw.name),
      api2wire_String(raw.deviceId),
      api2wire_String(raw.locationName),
      api2wire_String(raw.statusPb)
    ];
  }

  @protected
  List<dynamic> api2wire_box_autoadd_add_or_update_portal_station(
      AddOrUpdatePortalStation raw) {
    return api2wire_add_or_update_portal_station(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_local_firmware(LocalFirmware raw) {
    return api2wire_local_firmware(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_tokens(Tokens raw) {
    return api2wire_tokens(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_wifi_transmission_config(
      WifiTransmissionConfig raw) {
    return api2wire_wifi_transmission_config(raw);
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> api2wire_list_record_archive(List<RecordArchive> raw) {
    return raw.map(api2wire_record_archive).toList();
  }

  @protected
  List<dynamic> api2wire_local_firmware(LocalFirmware raw) {
    return [
      api2wire_i64(raw.id),
      api2wire_String(raw.label),
      api2wire_i64(raw.time),
      api2wire_String(raw.module),
      api2wire_String(raw.profile)
    ];
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_tokens(Tokens? raw) {
    return raw == null ? null : api2wire_box_autoadd_tokens(raw);
  }

  @protected
  List<dynamic> api2wire_record_archive(RecordArchive raw) {
    return [api2wire_String(raw.deviceId), api2wire_String(raw.path)];
  }

  @protected
  List<dynamic> api2wire_tokens(Tokens raw) {
    return [
      api2wire_String(raw.token),
      api2wire_transmission_token(raw.transmission)
    ];
  }

  @protected
  List<dynamic> api2wire_transmission_token(TransmissionToken raw) {
    return [api2wire_String(raw.token), api2wire_String(raw.url)];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_wifi_transmission_config(WifiTransmissionConfig raw) {
    return [api2wire_opt_box_autoadd_tokens(raw.tokens)];
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_start_native(
      NativePortType port_, String storage_path, String portal_base_url);

  external dynamic /* void */ wire_get_my_stations(NativePortType port_);

  external dynamic /* void */ wire_authenticate_portal(
      NativePortType port_, String email, String password);

  external dynamic /* void */ wire_add_or_update_station_in_portal(
      NativePortType port_, List<dynamic> tokens, List<dynamic> station);

  external dynamic /* void */ wire_configure_wifi_transmission(
      NativePortType port_, String device_id, List<dynamic> config);

  external dynamic /* void */ wire_clear_calibration(
      NativePortType port_, String device_id, int module);

  external dynamic /* void */ wire_calibrate(
      NativePortType port_, String device_id, int module, Uint8List data);

  external dynamic /* void */ wire_validate_tokens(
      NativePortType port_, List<dynamic> tokens);

  external dynamic /* void */ wire_start_download(
      NativePortType port_, String device_id);

  external dynamic /* void */ wire_start_upload(NativePortType port_,
      String device_id, List<dynamic> tokens, List<dynamic> files);

  external dynamic /* void */ wire_cache_firmware(
      NativePortType port_, List<dynamic>? tokens);

  external dynamic /* void */ wire_upgrade_station(NativePortType port_,
      String device_id, List<dynamic> firmware, bool swap);

  external dynamic /* void */ wire_rust_release_mode(NativePortType port_);

  external dynamic /* void */ wire_create_log_sink(NativePortType port_);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_start_native(
          NativePortType port_, String storage_path, String portal_base_url) =>
      wasmModule.wire_start_native(port_, storage_path, portal_base_url);

  void wire_get_my_stations(NativePortType port_) =>
      wasmModule.wire_get_my_stations(port_);

  void wire_authenticate_portal(
          NativePortType port_, String email, String password) =>
      wasmModule.wire_authenticate_portal(port_, email, password);

  void wire_add_or_update_station_in_portal(
          NativePortType port_, List<dynamic> tokens, List<dynamic> station) =>
      wasmModule.wire_add_or_update_station_in_portal(port_, tokens, station);

  void wire_configure_wifi_transmission(
          NativePortType port_, String device_id, List<dynamic> config) =>
      wasmModule.wire_configure_wifi_transmission(port_, device_id, config);

  void wire_clear_calibration(
          NativePortType port_, String device_id, int module) =>
      wasmModule.wire_clear_calibration(port_, device_id, module);

  void wire_calibrate(
          NativePortType port_, String device_id, int module, Uint8List data) =>
      wasmModule.wire_calibrate(port_, device_id, module, data);

  void wire_validate_tokens(NativePortType port_, List<dynamic> tokens) =>
      wasmModule.wire_validate_tokens(port_, tokens);

  void wire_start_download(NativePortType port_, String device_id) =>
      wasmModule.wire_start_download(port_, device_id);

  void wire_start_upload(NativePortType port_, String device_id,
          List<dynamic> tokens, List<dynamic> files) =>
      wasmModule.wire_start_upload(port_, device_id, tokens, files);

  void wire_cache_firmware(NativePortType port_, List<dynamic>? tokens) =>
      wasmModule.wire_cache_firmware(port_, tokens);

  void wire_upgrade_station(NativePortType port_, String device_id,
          List<dynamic> firmware, bool swap) =>
      wasmModule.wire_upgrade_station(port_, device_id, firmware, swap);

  void wire_rust_release_mode(NativePortType port_) =>
      wasmModule.wire_rust_release_mode(port_);

  void wire_create_log_sink(NativePortType port_) =>
      wasmModule.wire_create_log_sink(port_);
}
