// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
            // ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const
            
import "bridge_definitions.dart";
import 'dart:convert';
            import 'dart:async';
            import 'package:meta/meta.dart';
            import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
            import 'dart:async';
            import 'package:meta/meta.dart';
            import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;










class NativeImpl implements Native {
                final NativePlatform _platform;
                factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

                /// Only valid on web/WASM platforms.
                factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
                    NativeImpl(module as ExternalLibrary);
                NativeImpl.raw(this._platform);
Stream<DomainMessage> startNative({ required String storagePath ,required String portalBaseUrl ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(storagePath);
var arg1 = _platform.api2wire_String(portalBaseUrl);
            return _platform.executeStream(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_start_native(port_, arg0, arg1),
            parseSuccessData: _wire2api_domain_message,
            parseErrorData: null,
            
        constMeta: kStartNativeConstMeta,
        argValues: [storagePath, portalBaseUrl],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kStartNativeConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "start_native",
            argNames: ["storagePath", "portalBaseUrl"],
        );
        
Future<List<StationConfig>> getMyStations({ dynamic hint }) {
            
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_get_my_stations(port_),
            parseSuccessData: _wire2api_list_station_config,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kGetMyStationsConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kGetMyStationsConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "get_my_stations",
            argNames: [],
        );
        
Future<Authenticated> authenticatePortal({ required String email ,required String password ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(email);
var arg1 = _platform.api2wire_String(password);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_authenticate_portal(port_, arg0, arg1),
            parseSuccessData: _wire2api_authenticated,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kAuthenticatePortalConstMeta,
        argValues: [email, password],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kAuthenticatePortalConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "authenticate_portal",
            argNames: ["email", "password"],
        );
        
Future<int?> addOrUpdateStationInPortal({ required Tokens tokens ,required AddOrUpdatePortalStation station ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_tokens(tokens);
var arg1 = _platform.api2wire_box_autoadd_add_or_update_portal_station(station);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_add_or_update_station_in_portal(port_, arg0, arg1),
            parseSuccessData: _wire2api_opt_box_autoadd_u32,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kAddOrUpdateStationInPortalConstMeta,
        argValues: [tokens, station],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kAddOrUpdateStationInPortalConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "add_or_update_station_in_portal",
            argNames: ["tokens", "station"],
        );
        
Future<void> configureWifiTransmission({ required String deviceId ,required WifiTransmissionConfig config ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
var arg1 = _platform.api2wire_box_autoadd_wifi_transmission_config(config);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_configure_wifi_transmission(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kConfigureWifiTransmissionConstMeta,
        argValues: [deviceId, config],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kConfigureWifiTransmissionConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "configure_wifi_transmission",
            argNames: ["deviceId", "config"],
        );
        
Future<void> clearCalibration({ required String deviceId ,required int module ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
var arg1 = api2wire_usize(module);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_clear_calibration(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kClearCalibrationConstMeta,
        argValues: [deviceId, module],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kClearCalibrationConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "clear_calibration",
            argNames: ["deviceId", "module"],
        );
        
Future<void> calibrate({ required String deviceId ,required int module ,required Uint8List data ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
var arg1 = api2wire_usize(module);
var arg2 = _platform.api2wire_uint_8_list(data);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_calibrate(port_, arg0, arg1, arg2),
            parseSuccessData: _wire2api_unit,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kCalibrateConstMeta,
        argValues: [deviceId, module, data],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kCalibrateConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "calibrate",
            argNames: ["deviceId", "module", "data"],
        );
        
Future<Authenticated> validateTokens({ required Tokens tokens ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_tokens(tokens);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_validate_tokens(port_, arg0),
            parseSuccessData: _wire2api_authenticated,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kValidateTokensConstMeta,
        argValues: [tokens],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kValidateTokensConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "validate_tokens",
            argNames: ["tokens"],
        );
        
Future<TransferProgress> startDownload({ required String deviceId ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_start_download(port_, arg0),
            parseSuccessData: _wire2api_transfer_progress,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kStartDownloadConstMeta,
        argValues: [deviceId],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kStartDownloadConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "start_download",
            argNames: ["deviceId"],
        );
        
Future<TransferProgress> startUpload({ required String deviceId ,required Tokens tokens ,required List<RecordArchive> files ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
var arg1 = _platform.api2wire_box_autoadd_tokens(tokens);
var arg2 = _platform.api2wire_list_record_archive(files);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_start_upload(port_, arg0, arg1, arg2),
            parseSuccessData: _wire2api_transfer_progress,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kStartUploadConstMeta,
        argValues: [deviceId, tokens, files],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kStartUploadConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "start_upload",
            argNames: ["deviceId", "tokens", "files"],
        );
        
Future<FirmwareDownloadStatus> cacheFirmware({ Tokens? tokens ,dynamic hint }) {
            var arg0 = _platform.api2wire_opt_box_autoadd_tokens(tokens);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_cache_firmware(port_, arg0),
            parseSuccessData: _wire2api_firmware_download_status,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kCacheFirmwareConstMeta,
        argValues: [tokens],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kCacheFirmwareConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "cache_firmware",
            argNames: ["tokens"],
        );
        
Future<UpgradeProgress> upgradeStation({ required String deviceId ,required LocalFirmware firmware ,required bool swap ,dynamic hint }) {
            var arg0 = _platform.api2wire_String(deviceId);
var arg1 = _platform.api2wire_box_autoadd_local_firmware(firmware);
var arg2 = swap;
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_upgrade_station(port_, arg0, arg1, arg2),
            parseSuccessData: _wire2api_upgrade_progress,
            parseErrorData: _wire2api_FrbAnyhowException,
            
        constMeta: kUpgradeStationConstMeta,
        argValues: [deviceId, firmware, swap],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kUpgradeStationConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "upgrade_station",
            argNames: ["deviceId", "firmware", "swap"],
        );
        
Future<bool> rustReleaseMode({ dynamic hint }) {
            
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
            parseSuccessData: _wire2api_bool,
            parseErrorData: null,
            
        constMeta: kRustReleaseModeConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "rust_release_mode",
            argNames: [],
        );
        
Stream<String> createLogSink({ dynamic hint }) {
            
            return _platform.executeStream(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_create_log_sink(port_),
            parseSuccessData: _wire2api_String,
            parseErrorData: null,
            
        constMeta: kCreateLogSinkConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kCreateLogSinkConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "create_log_sink",
            argNames: [],
        );
        
void dispose() {_platform.dispose();}
// Section: wire2api

DateTime _wire2api_Chrono_Utc(dynamic raw) {
            return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
        }
        

FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
            return FrbAnyhowException(raw as String);
        }
        

String _wire2api_String(dynamic raw) {
            return raw as String;
        }
        

Authenticated _wire2api_authenticated(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
                return Authenticated(email: _wire2api_String(arr[0]),
name: _wire2api_String(arr[1]),
tokens: _wire2api_tokens(arr[2]),);
        }
        

BatteryInfo _wire2api_battery_info(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return BatteryInfo(percentage: _wire2api_f32(arr[0]),
voltage: _wire2api_f32(arr[1]),);
        }
        

bool _wire2api_bool(dynamic raw) {
            return raw as bool;
        }
        

DownloadProgress _wire2api_box_autoadd_download_progress(dynamic raw) {
            return _wire2api_download_progress(raw);
        }
        

EphemeralConfig _wire2api_box_autoadd_ephemeral_config(dynamic raw) {
            return _wire2api_ephemeral_config(raw);
        }
        

FirmwareDownloadStatus _wire2api_box_autoadd_firmware_download_status(dynamic raw) {
            return _wire2api_firmware_download_status(raw);
        }
        

SensorValue _wire2api_box_autoadd_sensor_value(dynamic raw) {
            return _wire2api_sensor_value(raw);
        }
        

StationConfig _wire2api_box_autoadd_station_config(dynamic raw) {
            return _wire2api_station_config(raw);
        }
        

TransferProgress _wire2api_box_autoadd_transfer_progress(dynamic raw) {
            return _wire2api_transfer_progress(raw);
        }
        

TransmissionConfig _wire2api_box_autoadd_transmission_config(dynamic raw) {
            return _wire2api_transmission_config(raw);
        }
        

int _wire2api_box_autoadd_u32(dynamic raw) {
            return raw as int;
        }
        

UpgradeProgress _wire2api_box_autoadd_upgrade_progress(dynamic raw) {
            return _wire2api_upgrade_progress(raw);
        }
        

UploadProgress _wire2api_box_autoadd_upload_progress(dynamic raw) {
            return _wire2api_upload_progress(raw);
        }
        

DeviceCapabilities _wire2api_device_capabilities(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return DeviceCapabilities(udp: _wire2api_bool(arr[0]),);
        }
        

DomainMessage _wire2api_domain_message(dynamic raw) {
            switch (raw[0]) {
                case 0: return DomainMessage_PreAccount();
case 1: return DomainMessage_NearbyStations(_wire2api_list_nearby_station(raw[1]),);
case 2: return DomainMessage_StationRefreshed(_wire2api_box_autoadd_station_config(raw[1]),_wire2api_opt_box_autoadd_ephemeral_config(raw[2]),_wire2api_String(raw[3]),);
case 3: return DomainMessage_UploadProgress(_wire2api_box_autoadd_transfer_progress(raw[1]),);
case 4: return DomainMessage_DownloadProgress(_wire2api_box_autoadd_transfer_progress(raw[1]),);
case 5: return DomainMessage_FirmwareDownloadStatus(_wire2api_box_autoadd_firmware_download_status(raw[1]),);
case 6: return DomainMessage_UpgradeProgress(_wire2api_box_autoadd_upgrade_progress(raw[1]),);
case 7: return DomainMessage_AvailableFirmware(_wire2api_list_local_firmware(raw[1]),);
case 8: return DomainMessage_RecordArchives(_wire2api_list_record_archive(raw[1]),);
                default: throw Exception("unreachable");
            }
        }
        

DownloadProgress _wire2api_download_progress(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
                return DownloadProgress(started: _wire2api_u64(arr[0]),
completed: _wire2api_f32(arr[1]),
total: _wire2api_usize(arr[2]),
received: _wire2api_usize(arr[3]),);
        }
        

EphemeralConfig _wire2api_ephemeral_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
                return EphemeralConfig(transmission: _wire2api_opt_box_autoadd_transmission_config(arr[0]),
networks: _wire2api_list_network_config(arr[1]),
capabilities: _wire2api_device_capabilities(arr[2]),);
        }
        

double _wire2api_f32(dynamic raw) {
            return raw as double;
        }
        

FirmwareDownloadStatus _wire2api_firmware_download_status(dynamic raw) {
            switch (raw[0]) {
                case 0: return FirmwareDownloadStatus_Checking();
case 1: return FirmwareDownloadStatus_Downloading(_wire2api_box_autoadd_download_progress(raw[1]),);
case 2: return FirmwareDownloadStatus_Offline();
case 3: return FirmwareDownloadStatus_Completed();
case 4: return FirmwareDownloadStatus_Failed();
                default: throw Exception("unreachable");
            }
        }
        

FirmwareInfo _wire2api_firmware_info(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return FirmwareInfo(label: _wire2api_String(arr[0]),
time: _wire2api_i64(arr[1]),);
        }
        

int _wire2api_i64(dynamic raw) {
            return castInt(raw);
        }
        

List<LocalFirmware> _wire2api_list_local_firmware(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_local_firmware).toList();
        }
        

List<ModuleConfig> _wire2api_list_module_config(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_module_config).toList();
        }
        

List<NearbyStation> _wire2api_list_nearby_station(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_nearby_station).toList();
        }
        

List<NetworkConfig> _wire2api_list_network_config(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_network_config).toList();
        }
        

List<RecordArchive> _wire2api_list_record_archive(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_record_archive).toList();
        }
        

List<SensorConfig> _wire2api_list_sensor_config(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_sensor_config).toList();
        }
        

List<StationConfig> _wire2api_list_station_config(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_station_config).toList();
        }
        

LocalFirmware _wire2api_local_firmware(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
                return LocalFirmware(id: _wire2api_i64(arr[0]),
label: _wire2api_String(arr[1]),
time: _wire2api_i64(arr[2]),
module: _wire2api_String(arr[3]),
profile: _wire2api_String(arr[4]),);
        }
        

ModuleConfig _wire2api_module_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
                return ModuleConfig(position: _wire2api_u32(arr[0]),
moduleId: _wire2api_String(arr[1]),
key: _wire2api_String(arr[2]),
sensors: _wire2api_list_sensor_config(arr[3]),
configuration: _wire2api_opt_uint_8_list(arr[4]),);
        }
        

NearbyStation _wire2api_nearby_station(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return NearbyStation(deviceId: _wire2api_String(arr[0]),
busy: _wire2api_bool(arr[1]),);
        }
        

NetworkConfig _wire2api_network_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return NetworkConfig(ssid: _wire2api_String(arr[0]),);
        }
        

EphemeralConfig? _wire2api_opt_box_autoadd_ephemeral_config(dynamic raw) {
            return raw == null ? null : _wire2api_box_autoadd_ephemeral_config(raw);
        }
        

SensorValue? _wire2api_opt_box_autoadd_sensor_value(dynamic raw) {
            return raw == null ? null : _wire2api_box_autoadd_sensor_value(raw);
        }
        

TransmissionConfig? _wire2api_opt_box_autoadd_transmission_config(dynamic raw) {
            return raw == null ? null : _wire2api_box_autoadd_transmission_config(raw);
        }
        

int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
            return raw == null ? null : _wire2api_box_autoadd_u32(raw);
        }
        

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
            return raw == null ? null : _wire2api_uint_8_list(raw);
        }
        

RecordArchive _wire2api_record_archive(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return RecordArchive(deviceId: _wire2api_String(arr[0]),
path: _wire2api_String(arr[1]),);
        }
        

SensorConfig _wire2api_sensor_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
                return SensorConfig(number: _wire2api_u32(arr[0]),
key: _wire2api_String(arr[1]),
fullKey: _wire2api_String(arr[2]),
calibratedUom: _wire2api_String(arr[3]),
uncalibratedUom: _wire2api_String(arr[4]),
value: _wire2api_opt_box_autoadd_sensor_value(arr[5]),);
        }
        

SensorValue _wire2api_sensor_value(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
                return SensorValue(time: _wire2api_Chrono_Utc(arr[0]),
value: _wire2api_f32(arr[1]),
uncalibrated: _wire2api_f32(arr[2]),);
        }
        

SolarInfo _wire2api_solar_info(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return SolarInfo(voltage: _wire2api_f32(arr[0]),);
        }
        

StationConfig _wire2api_station_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 9) throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
                return StationConfig(deviceId: _wire2api_String(arr[0]),
name: _wire2api_String(arr[1]),
firmware: _wire2api_firmware_info(arr[2]),
lastSeen: _wire2api_Chrono_Utc(arr[3]),
meta: _wire2api_stream_info(arr[4]),
data: _wire2api_stream_info(arr[5]),
battery: _wire2api_battery_info(arr[6]),
solar: _wire2api_solar_info(arr[7]),
modules: _wire2api_list_module_config(arr[8]),);
        }
        

StreamInfo _wire2api_stream_info(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return StreamInfo(size: _wire2api_u64(arr[0]),
records: _wire2api_u64(arr[1]),);
        }
        

Tokens _wire2api_tokens(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return Tokens(token: _wire2api_String(arr[0]),
transmission: _wire2api_transmission_token(arr[1]),);
        }
        

TransferProgress _wire2api_transfer_progress(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return TransferProgress(deviceId: _wire2api_String(arr[0]),
status: _wire2api_transfer_status(arr[1]),);
        }
        

TransferStatus _wire2api_transfer_status(dynamic raw) {
            switch (raw[0]) {
                case 0: return TransferStatus_Starting();
case 1: return TransferStatus_Downloading(_wire2api_box_autoadd_download_progress(raw[1]),);
case 2: return TransferStatus_Uploading(_wire2api_box_autoadd_upload_progress(raw[1]),);
case 3: return TransferStatus_Processing();
case 4: return TransferStatus_Completed();
case 5: return TransferStatus_Failed();
                default: throw Exception("unreachable");
            }
        }
        

TransmissionConfig _wire2api_transmission_config(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return TransmissionConfig(enabled: _wire2api_bool(arr[0]),);
        }
        

TransmissionToken _wire2api_transmission_token(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return TransmissionToken(token: _wire2api_String(arr[0]),
url: _wire2api_String(arr[1]),);
        }
        

int _wire2api_u32(dynamic raw) {
            return raw as int;
        }
        

int _wire2api_u64(dynamic raw) {
            return castInt(raw);
        }
        

int _wire2api_u8(dynamic raw) {
            return raw as int;
        }
        

Uint8List _wire2api_uint_8_list(dynamic raw) {
            return raw as Uint8List;
        }
        

void _wire2api_unit(dynamic raw) {
            return;
        }
        

UpgradeProgress _wire2api_upgrade_progress(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
                return UpgradeProgress(deviceId: _wire2api_String(arr[0]),
firmwareId: _wire2api_i64(arr[1]),
status: _wire2api_upgrade_status(arr[2]),);
        }
        

UpgradeStatus _wire2api_upgrade_status(dynamic raw) {
            switch (raw[0]) {
                case 0: return UpgradeStatus_Starting();
case 1: return UpgradeStatus_Uploading(_wire2api_box_autoadd_upload_progress(raw[1]),);
case 2: return UpgradeStatus_Restarting();
case 3: return UpgradeStatus_Completed();
case 4: return UpgradeStatus_Failed();
                default: throw Exception("unreachable");
            }
        }
        

UploadProgress _wire2api_upload_progress(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return UploadProgress(bytesUploaded: _wire2api_u64(arr[0]),
totalBytes: _wire2api_u64(arr[1]),);
        }
        

int _wire2api_usize(dynamic raw) {
            return castInt(raw);
        }
        
}

// Section: api2wire



@protected
                    bool api2wire_bool(bool raw) {
                        return raw;
                    }











@protected
                    int api2wire_u8(int raw) {
                        return raw;
                    }

@protected
                    int api2wire_usize(int raw) {
                        return raw;
                    }

// Section: finalizer




class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
                NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
                        return api2wire_uint_8_list(utf8.encoder.convert(raw));
                    }


@protected
                    ffi.Pointer<wire_AddOrUpdatePortalStation> api2wire_box_autoadd_add_or_update_portal_station(AddOrUpdatePortalStation raw) {
                        final ptr = inner.new_box_autoadd_add_or_update_portal_station_0();
                        _api_fill_to_wire_add_or_update_portal_station(raw, ptr.ref);
                        return ptr;
                    }
@protected
                    ffi.Pointer<wire_LocalFirmware> api2wire_box_autoadd_local_firmware(LocalFirmware raw) {
                        final ptr = inner.new_box_autoadd_local_firmware_0();
                        _api_fill_to_wire_local_firmware(raw, ptr.ref);
                        return ptr;
                    }
@protected
                    ffi.Pointer<wire_Tokens> api2wire_box_autoadd_tokens(Tokens raw) {
                        final ptr = inner.new_box_autoadd_tokens_0();
                        _api_fill_to_wire_tokens(raw, ptr.ref);
                        return ptr;
                    }
@protected
                    ffi.Pointer<wire_WifiTransmissionConfig> api2wire_box_autoadd_wifi_transmission_config(WifiTransmissionConfig raw) {
                        final ptr = inner.new_box_autoadd_wifi_transmission_config_0();
                        _api_fill_to_wire_wifi_transmission_config(raw, ptr.ref);
                        return ptr;
                    }
@protected
                    int api2wire_i64(int raw) {
                        return raw;
                    }
@protected
                    ffi.Pointer<wire_list_record_archive> api2wire_list_record_archive(List<RecordArchive> raw) {
                        final ans = inner.new_list_record_archive_0(raw.length);
                for (var i = 0; i < raw.length; ++i) {
                    _api_fill_to_wire_record_archive(raw[i], ans.ref.ptr[i]);
                }
                return ans;
                
                    }

@protected
                    ffi.Pointer<wire_Tokens> api2wire_opt_box_autoadd_tokens(Tokens? raw) {
                        return raw == null ? ffi.nullptr : api2wire_box_autoadd_tokens(raw);
                    }




@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
                        final ans = inner.new_uint_8_list_0(raw.length);
                ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
                return ans;
                    }


// Section: finalizer


// Section: api_fill_to_wire



void _api_fill_to_wire_add_or_update_portal_station(AddOrUpdatePortalStation apiObj, wire_AddOrUpdatePortalStation wireObj) {
                wireObj.name = api2wire_String(apiObj.name);
wireObj.device_id = api2wire_String(apiObj.deviceId);
wireObj.location_name = api2wire_String(apiObj.locationName);
wireObj.status_pb = api2wire_String(apiObj.statusPb);
            }



void _api_fill_to_wire_box_autoadd_add_or_update_portal_station(AddOrUpdatePortalStation apiObj, ffi.Pointer<wire_AddOrUpdatePortalStation> wireObj) {
                _api_fill_to_wire_add_or_update_portal_station(apiObj, wireObj.ref);
            }

void _api_fill_to_wire_box_autoadd_local_firmware(LocalFirmware apiObj, ffi.Pointer<wire_LocalFirmware> wireObj) {
                _api_fill_to_wire_local_firmware(apiObj, wireObj.ref);
            }

void _api_fill_to_wire_box_autoadd_tokens(Tokens apiObj, ffi.Pointer<wire_Tokens> wireObj) {
                _api_fill_to_wire_tokens(apiObj, wireObj.ref);
            }

void _api_fill_to_wire_box_autoadd_wifi_transmission_config(WifiTransmissionConfig apiObj, ffi.Pointer<wire_WifiTransmissionConfig> wireObj) {
                _api_fill_to_wire_wifi_transmission_config(apiObj, wireObj.ref);
            }





void _api_fill_to_wire_local_firmware(LocalFirmware apiObj, wire_LocalFirmware wireObj) {
                wireObj.id = api2wire_i64(apiObj.id);
wireObj.label = api2wire_String(apiObj.label);
wireObj.time = api2wire_i64(apiObj.time);
wireObj.module = api2wire_String(apiObj.module);
wireObj.profile = api2wire_String(apiObj.profile);
            }

void _api_fill_to_wire_opt_box_autoadd_tokens(Tokens? apiObj, ffi.Pointer<wire_Tokens> wireObj) {
                if (apiObj != null) _api_fill_to_wire_box_autoadd_tokens(apiObj, wireObj);
            }

void _api_fill_to_wire_record_archive(RecordArchive apiObj, wire_RecordArchive wireObj) {
                wireObj.device_id = api2wire_String(apiObj.deviceId);
wireObj.path = api2wire_String(apiObj.path);
            }

void _api_fill_to_wire_tokens(Tokens apiObj, wire_Tokens wireObj) {
                wireObj.token = api2wire_String(apiObj.token);
_api_fill_to_wire_transmission_token(apiObj.transmission, wireObj.transmission);
            }

void _api_fill_to_wire_transmission_token(TransmissionToken apiObj, wire_TransmissionToken wireObj) {
                wireObj.token = api2wire_String(apiObj.token);
wireObj.url = api2wire_String(apiObj.url);
            }







void _api_fill_to_wire_wifi_transmission_config(WifiTransmissionConfig apiObj, wire_WifiTransmissionConfig wireObj) {
                wireObj.tokens = api2wire_opt_box_autoadd_tokens(apiObj.tokens);
            }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
            @internal
            late final dartApi = DartApiDl(init_frb_dart_api_dl);
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_start_native(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> portal_base_url,
  ) {
    return _wire_start_native(
      port_,
      storage_path,
      portal_base_url,
    );
  }

  late final _wire_start_nativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_start_native');
  late final _wire_start_native = _wire_start_nativePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_my_stations(
    int port_,
  ) {
    return _wire_get_my_stations(
      port_,
    );
  }

  late final _wire_get_my_stationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_my_stations');
  late final _wire_get_my_stations =
      _wire_get_my_stationsPtr.asFunction<void Function(int)>();

  void wire_authenticate_portal(
    int port_,
    ffi.Pointer<wire_uint_8_list> email,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_authenticate_portal(
      port_,
      email,
      password,
    );
  }

  late final _wire_authenticate_portalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_authenticate_portal');
  late final _wire_authenticate_portal =
      _wire_authenticate_portalPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_or_update_station_in_portal(
    int port_,
    ffi.Pointer<wire_Tokens> tokens,
    ffi.Pointer<wire_AddOrUpdatePortalStation> station,
  ) {
    return _wire_add_or_update_station_in_portal(
      port_,
      tokens,
      station,
    );
  }

  late final _wire_add_or_update_station_in_portalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Tokens>,
                  ffi.Pointer<wire_AddOrUpdatePortalStation>)>>(
      'wire_add_or_update_station_in_portal');
  late final _wire_add_or_update_station_in_portal =
      _wire_add_or_update_station_in_portalPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Tokens>,
              ffi.Pointer<wire_AddOrUpdatePortalStation>)>();

  void wire_configure_wifi_transmission(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_WifiTransmissionConfig> config,
  ) {
    return _wire_configure_wifi_transmission(
      port_,
      device_id,
      config,
    );
  }

  late final _wire_configure_wifi_transmissionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_WifiTransmissionConfig>)>>(
      'wire_configure_wifi_transmission');
  late final _wire_configure_wifi_transmission =
      _wire_configure_wifi_transmissionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_WifiTransmissionConfig>)>();

  void wire_clear_calibration(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    int module,
  ) {
    return _wire_clear_calibration(
      port_,
      device_id,
      module,
    );
  }

  late final _wire_clear_calibrationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_clear_calibration');
  late final _wire_clear_calibration = _wire_clear_calibrationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_calibrate(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    int module,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_calibrate(
      port_,
      device_id,
      module,
      data,
    );
  }

  late final _wire_calibratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr, ffi.Pointer<wire_uint_8_list>)>>('wire_calibrate');
  late final _wire_calibrate = _wire_calibratePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_validate_tokens(
    int port_,
    ffi.Pointer<wire_Tokens> tokens,
  ) {
    return _wire_validate_tokens(
      port_,
      tokens,
    );
  }

  late final _wire_validate_tokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Tokens>)>>('wire_validate_tokens');
  late final _wire_validate_tokens = _wire_validate_tokensPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Tokens>)>();

  void wire_start_download(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_start_download(
      port_,
      device_id,
    );
  }

  late final _wire_start_downloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_start_download');
  late final _wire_start_download = _wire_start_downloadPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_upload(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_Tokens> tokens,
    ffi.Pointer<wire_list_record_archive> files,
  ) {
    return _wire_start_upload(
      port_,
      device_id,
      tokens,
      files,
    );
  }

  late final _wire_start_uploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Tokens>,
              ffi.Pointer<wire_list_record_archive>)>>('wire_start_upload');
  late final _wire_start_upload = _wire_start_uploadPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_Tokens>, ffi.Pointer<wire_list_record_archive>)>();

  void wire_cache_firmware(
    int port_,
    ffi.Pointer<wire_Tokens> tokens,
  ) {
    return _wire_cache_firmware(
      port_,
      tokens,
    );
  }

  late final _wire_cache_firmwarePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Tokens>)>>('wire_cache_firmware');
  late final _wire_cache_firmware = _wire_cache_firmwarePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Tokens>)>();

  void wire_upgrade_station(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_LocalFirmware> firmware,
    bool swap,
  ) {
    return _wire_upgrade_station(
      port_,
      device_id,
      firmware,
      swap,
    );
  }

  late final _wire_upgrade_stationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_LocalFirmware>,
              ffi.Bool)>>('wire_upgrade_station');
  late final _wire_upgrade_station = _wire_upgrade_stationPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_LocalFirmware>, bool)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_create_log_sink(
    int port_,
  ) {
    return _wire_create_log_sink(
      port_,
    );
  }

  late final _wire_create_log_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_log_sink');
  late final _wire_create_log_sink =
      _wire_create_log_sinkPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_AddOrUpdatePortalStation>
      new_box_autoadd_add_or_update_portal_station_0() {
    return _new_box_autoadd_add_or_update_portal_station_0();
  }

  late final _new_box_autoadd_add_or_update_portal_station_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_AddOrUpdatePortalStation>
              Function()>>('new_box_autoadd_add_or_update_portal_station_0');
  late final _new_box_autoadd_add_or_update_portal_station_0 =
      _new_box_autoadd_add_or_update_portal_station_0Ptr
          .asFunction<ffi.Pointer<wire_AddOrUpdatePortalStation> Function()>();

  ffi.Pointer<wire_LocalFirmware> new_box_autoadd_local_firmware_0() {
    return _new_box_autoadd_local_firmware_0();
  }

  late final _new_box_autoadd_local_firmware_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalFirmware> Function()>>(
          'new_box_autoadd_local_firmware_0');
  late final _new_box_autoadd_local_firmware_0 =
      _new_box_autoadd_local_firmware_0Ptr
          .asFunction<ffi.Pointer<wire_LocalFirmware> Function()>();

  ffi.Pointer<wire_Tokens> new_box_autoadd_tokens_0() {
    return _new_box_autoadd_tokens_0();
  }

  late final _new_box_autoadd_tokens_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Tokens> Function()>>(
          'new_box_autoadd_tokens_0');
  late final _new_box_autoadd_tokens_0 = _new_box_autoadd_tokens_0Ptr
      .asFunction<ffi.Pointer<wire_Tokens> Function()>();

  ffi.Pointer<wire_WifiTransmissionConfig>
      new_box_autoadd_wifi_transmission_config_0() {
    return _new_box_autoadd_wifi_transmission_config_0();
  }

  late final _new_box_autoadd_wifi_transmission_config_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_WifiTransmissionConfig> Function()>>(
      'new_box_autoadd_wifi_transmission_config_0');
  late final _new_box_autoadd_wifi_transmission_config_0 =
      _new_box_autoadd_wifi_transmission_config_0Ptr
          .asFunction<ffi.Pointer<wire_WifiTransmissionConfig> Function()>();

  ffi.Pointer<wire_list_record_archive> new_list_record_archive_0(
    int len,
  ) {
    return _new_list_record_archive_0(
      len,
    );
  }

  late final _new_list_record_archive_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_record_archive> Function(
              ffi.Int32)>>('new_list_record_archive_0');
  late final _new_list_record_archive_0 = _new_list_record_archive_0Ptr
      .asFunction<ffi.Pointer<wire_list_record_archive> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}



final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_TransmissionToken extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> token;

  external ffi.Pointer<wire_uint_8_list> url;
}

final class wire_Tokens extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> token;

  external wire_TransmissionToken transmission;
}

final class wire_AddOrUpdatePortalStation extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_uint_8_list> location_name;

  external ffi.Pointer<wire_uint_8_list> status_pb;
}

final class wire_WifiTransmissionConfig extends ffi.Struct {
  external ffi.Pointer<wire_Tokens> tokens;
}

final class wire_RecordArchive extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_uint_8_list> path;
}

final class wire_list_record_archive extends ffi.Struct {
  external ffi.Pointer<wire_RecordArchive> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_LocalFirmware extends ffi.Struct {
  @ffi.Int64()
  external int id;

  external ffi.Pointer<wire_uint_8_list> label;

  @ffi.Int64()
  external int time;

  external ffi.Pointer<wire_uint_8_list> module;

  external ffi.Pointer<wire_uint_8_list> profile;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

