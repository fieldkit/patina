// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.28";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_add_or_update_station_in_portal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_or_update_station_in_portal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tokens = <crate::api::Tokens>::sse_decode(&mut deserializer);
            let api_station = <crate::api::AddOrUpdatePortalStation>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::add_or_update_station_in_portal(api_tokens, api_station)
                })())
            }
        },
    )
}
fn wire_authenticate_portal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "authenticate_portal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_email = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::authenticate_portal(api_email, api_password)
                })())
            }
        },
    )
}
fn wire_cache_firmware_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cache_firmware",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tokens = <Option<crate::api::Tokens>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::cache_firmware(api_tokens))())
        },
    )
}
fn wire_calibrate_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "calibrate",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_module = <usize>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::calibrate(api_device_id, api_module, api_data)
                })())
            }
        },
    )
}
fn wire_clear_calibration_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clear_calibration",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_module = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::clear_calibration(api_device_id, api_module)
                })())
            }
        },
    )
}
fn wire_configure_deploy_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_deploy",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_config = <crate::api::DeployConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::configure_deploy(api_device_id, api_config)
                })())
            }
        },
    )
}
fn wire_configure_lora_transmission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_lora_transmission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_config = <crate::api::LoraTransmissionConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::configure_lora_transmission(api_device_id, api_config)
                })())
            }
        },
    )
}
fn wire_configure_wifi_networks_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_wifi_networks",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_config = <crate::api::WifiNetworksConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::configure_wifi_networks(api_device_id, api_config)
                })())
            }
        },
    )
}
fn wire_configure_wifi_transmission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_wifi_transmission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_config = <crate::api::WifiTransmissionConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::configure_wifi_transmission(api_device_id, api_config)
                })())
            }
        },
    )
}
fn wire_create_log_sink_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::create_log_sink(StreamSink::new(
                        context.rust2dart_context().stream_sink::<_, String>(),
                    ))
                })())
            }
        },
    )
}
fn wire_get_my_stations_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_my_stations",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::get_my_stations())())
        },
    )
}
fn wire_register_portal_account_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_portal_account",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_email = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_tnc_account = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::register_portal_account(
                        api_email,
                        api_password,
                        api_name,
                        api_tnc_account,
                    )
                })())
            }
        },
    )
}
fn wire_rust_release_mode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_release_mode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_release_mode())
                })())
            }
        },
    )
}
fn wire_start_download_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_download",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_first = <Option<u64>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::start_download(api_device_id, api_first)
                })())
            }
        },
    )
}
fn wire_start_native_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_native",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_storage_path = <String>::sse_decode(&mut deserializer);
            let api_portal_base_url = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::start_native(
                        api_storage_path,
                        api_portal_base_url,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::DomainMessage>(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_start_upload_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_upload",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_tokens = <crate::api::Tokens>::sse_decode(&mut deserializer);
            let api_files = <Vec<crate::api::RecordArchive>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::start_upload(api_device_id, api_tokens, api_files)
                })())
            }
        },
    )
}
fn wire_upgrade_station_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "upgrade_station",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            let api_firmware = <crate::api::LocalFirmware>::sse_decode(&mut deserializer);
            let api_swap = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::upgrade_station(api_device_id, api_firmware, api_swap)
                })())
            }
        },
    )
}
fn wire_validate_tokens_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_tokens",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tokens = <crate::api::Tokens>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| transform_result_sse((move || crate::api::validate_tokens(api_tokens))())
        },
    )
}
fn wire_verify_lora_transmission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "verify_lora_transmission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_device_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::verify_lora_transmission(api_device_id)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::AddOrUpdatePortalStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_locationName = <String>::sse_decode(deserializer);
        let mut var_statusPb = <String>::sse_decode(deserializer);
        return crate::api::AddOrUpdatePortalStation {
            name: var_name,
            device_id: var_deviceId,
            location_name: var_locationName,
            status_pb: var_statusPb,
        };
    }
}

impl SseDecode for crate::api::Authenticated {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_tokens = <crate::api::Tokens>::sse_decode(deserializer);
        return crate::api::Authenticated {
            email: var_email,
            name: var_name,
            tokens: var_tokens,
        };
    }
}

impl SseDecode for crate::api::BatteryInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_percentage = <f32>::sse_decode(deserializer);
        let mut var_voltage = <f32>::sse_decode(deserializer);
        return crate::api::BatteryInfo {
            percentage: var_percentage,
            voltage: var_voltage,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::DeployConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_location = <String>::sse_decode(deserializer);
        let mut var_deployed = <u64>::sse_decode(deserializer);
        let mut var_schedule = <crate::api::Schedule>::sse_decode(deserializer);
        return crate::api::DeployConfig {
            location: var_location,
            deployed: var_deployed,
            schedule: var_schedule,
        };
    }
}

impl SseDecode for crate::api::DeploymentConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_startTime = <u64>::sse_decode(deserializer);
        return crate::api::DeploymentConfig {
            start_time: var_startTime,
        };
    }
}

impl SseDecode for crate::api::DeviceCapabilities {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_udp = <bool>::sse_decode(deserializer);
        return crate::api::DeviceCapabilities { udp: var_udp };
    }
}

impl SseDecode for crate::api::DomainMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::DomainMessage::PreAccount;
            }
            1 => {
                let mut var_field0 = <Vec<crate::api::NearbyStation>>::sse_decode(deserializer);
                return crate::api::DomainMessage::NearbyStations(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::StationConfig>::sse_decode(deserializer);
                let mut var_field1 =
                    <Option<crate::api::EphemeralConfig>>::sse_decode(deserializer);
                let mut var_field2 = <String>::sse_decode(deserializer);
                return crate::api::DomainMessage::StationRefreshed(
                    var_field0, var_field1, var_field2,
                );
            }
            3 => {
                let mut var_field0 = <crate::api::TransferProgress>::sse_decode(deserializer);
                return crate::api::DomainMessage::UploadProgress(var_field0);
            }
            4 => {
                let mut var_field0 = <crate::api::TransferProgress>::sse_decode(deserializer);
                return crate::api::DomainMessage::DownloadProgress(var_field0);
            }
            5 => {
                let mut var_field0 = <crate::api::FirmwareDownloadStatus>::sse_decode(deserializer);
                return crate::api::DomainMessage::FirmwareDownloadStatus(var_field0);
            }
            6 => {
                let mut var_field0 = <crate::api::UpgradeProgress>::sse_decode(deserializer);
                return crate::api::DomainMessage::UpgradeProgress(var_field0);
            }
            7 => {
                let mut var_field0 = <Vec<crate::api::LocalFirmware>>::sse_decode(deserializer);
                return crate::api::DomainMessage::AvailableFirmware(var_field0);
            }
            8 => {
                let mut var_field0 = <Vec<crate::api::RecordArchive>>::sse_decode(deserializer);
                return crate::api::DomainMessage::RecordArchives(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::DownloadProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_started = <u64>::sse_decode(deserializer);
        let mut var_completed = <f32>::sse_decode(deserializer);
        let mut var_total = <usize>::sse_decode(deserializer);
        let mut var_received = <usize>::sse_decode(deserializer);
        return crate::api::DownloadProgress {
            started: var_started,
            completed: var_completed,
            total: var_total,
            received: var_received,
        };
    }
}

impl SseDecode for crate::api::EphemeralConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deployment = <Option<crate::api::DeploymentConfig>>::sse_decode(deserializer);
        let mut var_transmission =
            <Option<crate::api::TransmissionConfig>>::sse_decode(deserializer);
        let mut var_networks = <Vec<crate::api::NetworkConfig>>::sse_decode(deserializer);
        let mut var_lora = <Option<crate::api::LoraConfig>>::sse_decode(deserializer);
        let mut var_capabilities = <crate::api::DeviceCapabilities>::sse_decode(deserializer);
        let mut var_events = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::EphemeralConfig {
            deployment: var_deployment,
            transmission: var_transmission,
            networks: var_networks,
            lora: var_lora,
            capabilities: var_capabilities,
            events: var_events,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::FirmwareDownloadStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::FirmwareDownloadStatus::Checking;
            }
            1 => {
                let mut var_field0 = <crate::api::DownloadProgress>::sse_decode(deserializer);
                return crate::api::FirmwareDownloadStatus::Downloading(var_field0);
            }
            2 => {
                return crate::api::FirmwareDownloadStatus::Offline;
            }
            3 => {
                return crate::api::FirmwareDownloadStatus::Completed;
            }
            4 => {
                return crate::api::FirmwareDownloadStatus::Failed;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::FirmwareInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_time = <i64>::sse_decode(deserializer);
        return crate::api::FirmwareInfo {
            label: var_label,
            time: var_time,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::api::LocalFirmware> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::LocalFirmware>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::ModuleConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::ModuleConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::NearbyStation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::NearbyStation>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::NetworkConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::NetworkConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::RecordArchive> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::RecordArchive>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::SensorConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::SensorConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::StationConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::StationConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::WifiNetworkConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::WifiNetworkConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::LocalFirmware {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_time = <i64>::sse_decode(deserializer);
        let mut var_module = <String>::sse_decode(deserializer);
        let mut var_profile = <String>::sse_decode(deserializer);
        return crate::api::LocalFirmware {
            id: var_id,
            label: var_label,
            time: var_time,
            module: var_module,
            profile: var_profile,
        };
    }
}

impl SseDecode for crate::api::LoraBand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::LoraBand::F915Mhz,
            1 => crate::api::LoraBand::F868Mhz,
            _ => unreachable!("Invalid variant for LoraBand: {}", inner),
        };
    }
}

impl SseDecode for crate::api::LoraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_available = <bool>::sse_decode(deserializer);
        let mut var_band = <crate::api::LoraBand>::sse_decode(deserializer);
        let mut var_deviceEui = <Vec<u8>>::sse_decode(deserializer);
        let mut var_appKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_joinEui = <Vec<u8>>::sse_decode(deserializer);
        let mut var_deviceAddress = <Vec<u8>>::sse_decode(deserializer);
        let mut var_networkSessionKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_appSessionKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::LoraConfig {
            available: var_available,
            band: var_band,
            device_eui: var_deviceEui,
            app_key: var_appKey,
            join_eui: var_joinEui,
            device_address: var_deviceAddress,
            network_session_key: var_networkSessionKey,
            app_session_key: var_appSessionKey,
        };
    }
}

impl SseDecode for crate::api::LoraTransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_band = <Option<u32>>::sse_decode(deserializer);
        let mut var_appKey = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_joinEui = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_schedule = <Option<crate::api::Schedule>>::sse_decode(deserializer);
        return crate::api::LoraTransmissionConfig {
            band: var_band,
            app_key: var_appKey,
            join_eui: var_joinEui,
            schedule: var_schedule,
        };
    }
}

impl SseDecode for crate::api::ModuleConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_position = <u32>::sse_decode(deserializer);
        let mut var_moduleId = <String>::sse_decode(deserializer);
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_sensors = <Vec<crate::api::SensorConfig>>::sse_decode(deserializer);
        let mut var_configuration = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::ModuleConfig {
            position: var_position,
            module_id: var_moduleId,
            key: var_key,
            sensors: var_sensors,
            configuration: var_configuration,
        };
    }
}

impl SseDecode for crate::api::NearbyStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_busy = <bool>::sse_decode(deserializer);
        return crate::api::NearbyStation {
            device_id: var_deviceId,
            busy: var_busy,
        };
    }
}

impl SseDecode for crate::api::NetworkConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_index = <usize>::sse_decode(deserializer);
        let mut var_ssid = <String>::sse_decode(deserializer);
        let mut var_preferred = <bool>::sse_decode(deserializer);
        return crate::api::NetworkConfig {
            index: var_index,
            ssid: var_ssid,
            preferred: var_preferred,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::DeploymentConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::DeploymentConfig>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::EphemeralConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::EphemeralConfig>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::LoraConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::LoraConfig>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::Schedule> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::Schedule>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::SensorValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::SensorValue>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::Tokens> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::Tokens>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::TransmissionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::TransmissionConfig>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::PortalError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::PortalError::Authentication;
            }
            1 => {
                return crate::api::PortalError::Connecting;
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::PortalError::Other(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::RecordArchive {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_generationId = <String>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_head = <i64>::sse_decode(deserializer);
        let mut var_tail = <i64>::sse_decode(deserializer);
        return crate::api::RecordArchive {
            device_id: var_deviceId,
            generation_id: var_generationId,
            path: var_path,
            head: var_head,
            tail: var_tail,
        };
    }
}

impl SseDecode for crate::api::Registered {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::api::Registered {
            email: var_email,
            name: var_name,
        };
    }
}

impl SseDecode for crate::api::Schedule {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::Schedule::Every(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::SensorConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_number = <u32>::sse_decode(deserializer);
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_fullKey = <String>::sse_decode(deserializer);
        let mut var_calibratedUom = <String>::sse_decode(deserializer);
        let mut var_uncalibratedUom = <String>::sse_decode(deserializer);
        let mut var_value = <Option<crate::api::SensorValue>>::sse_decode(deserializer);
        let mut var_previousValue = <Option<crate::api::SensorValue>>::sse_decode(deserializer);
        return crate::api::SensorConfig {
            number: var_number,
            key: var_key,
            full_key: var_fullKey,
            calibrated_uom: var_calibratedUom,
            uncalibrated_uom: var_uncalibratedUom,
            value: var_value,
            previous_value: var_previousValue,
        };
    }
}

impl SseDecode for crate::api::SensorValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_time = <crate::api::UtcDateTime>::sse_decode(deserializer);
        let mut var_value = <f32>::sse_decode(deserializer);
        let mut var_uncalibrated = <f32>::sse_decode(deserializer);
        return crate::api::SensorValue {
            time: var_time,
            value: var_value,
            uncalibrated: var_uncalibrated,
        };
    }
}

impl SseDecode for crate::api::SolarInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_voltage = <f32>::sse_decode(deserializer);
        return crate::api::SolarInfo {
            voltage: var_voltage,
        };
    }
}

impl SseDecode for crate::api::StationConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_generationId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_firmware = <crate::api::FirmwareInfo>::sse_decode(deserializer);
        let mut var_lastSeen = <crate::api::UtcDateTime>::sse_decode(deserializer);
        let mut var_meta = <crate::api::StreamInfo>::sse_decode(deserializer);
        let mut var_data = <crate::api::StreamInfo>::sse_decode(deserializer);
        let mut var_battery = <crate::api::BatteryInfo>::sse_decode(deserializer);
        let mut var_solar = <crate::api::SolarInfo>::sse_decode(deserializer);
        let mut var_modules = <Vec<crate::api::ModuleConfig>>::sse_decode(deserializer);
        return crate::api::StationConfig {
            device_id: var_deviceId,
            generation_id: var_generationId,
            name: var_name,
            firmware: var_firmware,
            last_seen: var_lastSeen,
            meta: var_meta,
            data: var_data,
            battery: var_battery,
            solar: var_solar,
            modules: var_modules,
        };
    }
}

impl SseDecode for crate::api::StreamInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_size = <u64>::sse_decode(deserializer);
        let mut var_records = <u64>::sse_decode(deserializer);
        return crate::api::StreamInfo {
            size: var_size,
            records: var_records,
        };
    }
}

impl SseDecode for crate::api::Tokens {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_token = <String>::sse_decode(deserializer);
        let mut var_transmission = <crate::api::TransmissionToken>::sse_decode(deserializer);
        return crate::api::Tokens {
            token: var_token,
            transmission: var_transmission,
        };
    }
}

impl SseDecode for crate::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_status = <crate::api::TransferStatus>::sse_decode(deserializer);
        return crate::api::TransferProgress {
            device_id: var_deviceId,
            status: var_status,
        };
    }
}

impl SseDecode for crate::api::TransferStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::TransferStatus::Starting;
            }
            1 => {
                let mut var_field0 = <crate::api::DownloadProgress>::sse_decode(deserializer);
                return crate::api::TransferStatus::Downloading(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::UploadProgress>::sse_decode(deserializer);
                return crate::api::TransferStatus::Uploading(var_field0);
            }
            3 => {
                return crate::api::TransferStatus::Processing;
            }
            4 => {
                return crate::api::TransferStatus::Completed;
            }
            5 => {
                return crate::api::TransferStatus::Failed;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::TransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_enabled = <bool>::sse_decode(deserializer);
        return crate::api::TransmissionConfig {
            enabled: var_enabled,
        };
    }
}

impl SseDecode for crate::api::TransmissionToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_token = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::api::TransmissionToken {
            token: var_token,
            url: var_url,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::UpgradeProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_firmwareId = <i64>::sse_decode(deserializer);
        let mut var_status = <crate::api::UpgradeStatus>::sse_decode(deserializer);
        return crate::api::UpgradeProgress {
            device_id: var_deviceId,
            firmware_id: var_firmwareId,
            status: var_status,
        };
    }
}

impl SseDecode for crate::api::UpgradeStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::UpgradeStatus::Starting;
            }
            1 => {
                let mut var_field0 = <crate::api::UploadProgress>::sse_decode(deserializer);
                return crate::api::UpgradeStatus::Uploading(var_field0);
            }
            2 => {
                return crate::api::UpgradeStatus::Restarting;
            }
            3 => {
                return crate::api::UpgradeStatus::Completed;
            }
            4 => {
                return crate::api::UpgradeStatus::Failed;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::UploadProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bytesUploaded = <u64>::sse_decode(deserializer);
        let mut var_totalBytes = <u64>::sse_decode(deserializer);
        return crate::api::UploadProgress {
            bytes_uploaded: var_bytesUploaded,
            total_bytes: var_totalBytes,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::UtcDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::UtcDateTime(var_field0);
    }
}

impl SseDecode for crate::api::WifiNetworkConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_index = <usize>::sse_decode(deserializer);
        let mut var_ssid = <Option<String>>::sse_decode(deserializer);
        let mut var_password = <Option<String>>::sse_decode(deserializer);
        let mut var_preferred = <bool>::sse_decode(deserializer);
        let mut var_keeping = <bool>::sse_decode(deserializer);
        return crate::api::WifiNetworkConfig {
            index: var_index,
            ssid: var_ssid,
            password: var_password,
            preferred: var_preferred,
            keeping: var_keeping,
        };
    }
}

impl SseDecode for crate::api::WifiNetworksConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_networks = <Vec<crate::api::WifiNetworkConfig>>::sse_decode(deserializer);
        return crate::api::WifiNetworksConfig {
            networks: var_networks,
        };
    }
}

impl SseDecode for crate::api::WifiTransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tokens = <Option<crate::api::Tokens>>::sse_decode(deserializer);
        let mut var_schedule = <Option<crate::api::Schedule>>::sse_decode(deserializer);
        return crate::api::WifiTransmissionConfig {
            tokens: var_tokens,
            schedule: var_schedule,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        5 => wire_add_or_update_station_in_portal_impl(port, ptr, rust_vec_len, data_len),
        3 => wire_authenticate_portal_impl(port, ptr, rust_vec_len, data_len),
        16 => wire_cache_firmware_impl(port, ptr, rust_vec_len, data_len),
        12 => wire_calibrate_impl(port, ptr, rust_vec_len, data_len),
        11 => wire_clear_calibration_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_configure_deploy_impl(port, ptr, rust_vec_len, data_len),
        9 => wire_configure_lora_transmission_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_configure_wifi_networks_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_configure_wifi_transmission_impl(port, ptr, rust_vec_len, data_len),
        19 => wire_create_log_sink_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_get_my_stations_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_register_portal_account_impl(port, ptr, rust_vec_len, data_len),
        18 => wire_rust_release_mode_impl(port, ptr, rust_vec_len, data_len),
        14 => wire_start_download_impl(port, ptr, rust_vec_len, data_len),
        1 => wire_start_native_impl(port, ptr, rust_vec_len, data_len),
        15 => wire_start_upload_impl(port, ptr, rust_vec_len, data_len),
        17 => wire_upgrade_station_impl(port, ptr, rust_vec_len, data_len),
        13 => wire_validate_tokens_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_verify_lora_transmission_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AddOrUpdatePortalStation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.device_id.into_into_dart().into_dart(),
            self.location_name.into_into_dart().into_dart(),
            self.status_pb.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::AddOrUpdatePortalStation
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AddOrUpdatePortalStation>
    for crate::api::AddOrUpdatePortalStation
{
    fn into_into_dart(self) -> crate::api::AddOrUpdatePortalStation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::Authenticated {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.email.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.tokens.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Authenticated {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Authenticated> for crate::api::Authenticated {
    fn into_into_dart(self) -> crate::api::Authenticated {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::BatteryInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.percentage.into_into_dart().into_dart(),
            self.voltage.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::BatteryInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::BatteryInfo> for crate::api::BatteryInfo {
    fn into_into_dart(self) -> crate::api::BatteryInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DeployConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.location.into_into_dart().into_dart(),
            self.deployed.into_into_dart().into_dart(),
            self.schedule.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::DeployConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DeployConfig> for crate::api::DeployConfig {
    fn into_into_dart(self) -> crate::api::DeployConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DeploymentConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.start_time.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::DeploymentConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DeploymentConfig>
    for crate::api::DeploymentConfig
{
    fn into_into_dart(self) -> crate::api::DeploymentConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DeviceCapabilities {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.udp.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::DeviceCapabilities
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DeviceCapabilities>
    for crate::api::DeviceCapabilities
{
    fn into_into_dart(self) -> crate::api::DeviceCapabilities {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DomainMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::DomainMessage::PreAccount => [0.into_dart()].into_dart(),
            crate::api::DomainMessage::NearbyStations(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::StationRefreshed(field0, field1, field2) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::DomainMessage::UploadProgress(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::DownloadProgress(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::FirmwareDownloadStatus(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::UpgradeProgress(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::AvailableFirmware(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::DomainMessage::RecordArchives(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::DomainMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DomainMessage> for crate::api::DomainMessage {
    fn into_into_dart(self) -> crate::api::DomainMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::DownloadProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.started.into_into_dart().into_dart(),
            self.completed.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
            self.received.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::DownloadProgress {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::DownloadProgress>
    for crate::api::DownloadProgress
{
    fn into_into_dart(self) -> crate::api::DownloadProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::EphemeralConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.deployment.into_into_dart().into_dart(),
            self.transmission.into_into_dart().into_dart(),
            self.networks.into_into_dart().into_dart(),
            self.lora.into_into_dart().into_dart(),
            self.capabilities.into_into_dart().into_dart(),
            self.events.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::EphemeralConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::EphemeralConfig>
    for crate::api::EphemeralConfig
{
    fn into_into_dart(self) -> crate::api::EphemeralConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::FirmwareDownloadStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::FirmwareDownloadStatus::Checking => [0.into_dart()].into_dart(),
            crate::api::FirmwareDownloadStatus::Downloading(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FirmwareDownloadStatus::Offline => [2.into_dart()].into_dart(),
            crate::api::FirmwareDownloadStatus::Completed => [3.into_dart()].into_dart(),
            crate::api::FirmwareDownloadStatus::Failed => [4.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::FirmwareDownloadStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::FirmwareDownloadStatus>
    for crate::api::FirmwareDownloadStatus
{
    fn into_into_dart(self) -> crate::api::FirmwareDownloadStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::FirmwareInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.label.into_into_dart().into_dart(),
            self.time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::FirmwareInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::FirmwareInfo> for crate::api::FirmwareInfo {
    fn into_into_dart(self) -> crate::api::FirmwareInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LocalFirmware {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.time.into_into_dart().into_dart(),
            self.module.into_into_dart().into_dart(),
            self.profile.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LocalFirmware {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LocalFirmware> for crate::api::LocalFirmware {
    fn into_into_dart(self) -> crate::api::LocalFirmware {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LoraBand {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::F915Mhz => 0.into_dart(),
            Self::F868Mhz => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LoraBand {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LoraBand> for crate::api::LoraBand {
    fn into_into_dart(self) -> crate::api::LoraBand {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LoraConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.available.into_into_dart().into_dart(),
            self.band.into_into_dart().into_dart(),
            self.device_eui.into_into_dart().into_dart(),
            self.app_key.into_into_dart().into_dart(),
            self.join_eui.into_into_dart().into_dart(),
            self.device_address.into_into_dart().into_dart(),
            self.network_session_key.into_into_dart().into_dart(),
            self.app_session_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::LoraConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LoraConfig> for crate::api::LoraConfig {
    fn into_into_dart(self) -> crate::api::LoraConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::LoraTransmissionConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.band.into_into_dart().into_dart(),
            self.app_key.into_into_dart().into_dart(),
            self.join_eui.into_into_dart().into_dart(),
            self.schedule.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::LoraTransmissionConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::LoraTransmissionConfig>
    for crate::api::LoraTransmissionConfig
{
    fn into_into_dart(self) -> crate::api::LoraTransmissionConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ModuleConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.position.into_into_dart().into_dart(),
            self.module_id.into_into_dart().into_dart(),
            self.key.into_into_dart().into_dart(),
            self.sensors.into_into_dart().into_dart(),
            self.configuration.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ModuleConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ModuleConfig> for crate::api::ModuleConfig {
    fn into_into_dart(self) -> crate::api::ModuleConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::NearbyStation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.busy.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::NearbyStation {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::NearbyStation> for crate::api::NearbyStation {
    fn into_into_dart(self) -> crate::api::NearbyStation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::NetworkConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.ssid.into_into_dart().into_dart(),
            self.preferred.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::NetworkConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::NetworkConfig> for crate::api::NetworkConfig {
    fn into_into_dart(self) -> crate::api::NetworkConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::PortalError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::PortalError::Authentication => [0.into_dart()].into_dart(),
            crate::api::PortalError::Connecting => [1.into_dart()].into_dart(),
            crate::api::PortalError::Other(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::PortalError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::PortalError> for crate::api::PortalError {
    fn into_into_dart(self) -> crate::api::PortalError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::RecordArchive {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.generation_id.into_into_dart().into_dart(),
            self.path.into_into_dart().into_dart(),
            self.head.into_into_dart().into_dart(),
            self.tail.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::RecordArchive {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::RecordArchive> for crate::api::RecordArchive {
    fn into_into_dart(self) -> crate::api::RecordArchive {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::Registered {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.email.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Registered {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Registered> for crate::api::Registered {
    fn into_into_dart(self) -> crate::api::Registered {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::Schedule {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::Schedule::Every(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Schedule {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Schedule> for crate::api::Schedule {
    fn into_into_dart(self) -> crate::api::Schedule {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::SensorConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.number.into_into_dart().into_dart(),
            self.key.into_into_dart().into_dart(),
            self.full_key.into_into_dart().into_dart(),
            self.calibrated_uom.into_into_dart().into_dart(),
            self.uncalibrated_uom.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.previous_value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::SensorConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::SensorConfig> for crate::api::SensorConfig {
    fn into_into_dart(self) -> crate::api::SensorConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::SensorValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.time.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.uncalibrated.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::SensorValue {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::SensorValue> for crate::api::SensorValue {
    fn into_into_dart(self) -> crate::api::SensorValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::SolarInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.voltage.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::SolarInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::SolarInfo> for crate::api::SolarInfo {
    fn into_into_dart(self) -> crate::api::SolarInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::StationConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.generation_id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.firmware.into_into_dart().into_dart(),
            self.last_seen.into_into_dart().into_dart(),
            self.meta.into_into_dart().into_dart(),
            self.data.into_into_dart().into_dart(),
            self.battery.into_into_dart().into_dart(),
            self.solar.into_into_dart().into_dart(),
            self.modules.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::StationConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::StationConfig> for crate::api::StationConfig {
    fn into_into_dart(self) -> crate::api::StationConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::StreamInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.size.into_into_dart().into_dart(),
            self.records.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::StreamInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::StreamInfo> for crate::api::StreamInfo {
    fn into_into_dart(self) -> crate::api::StreamInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::Tokens {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.token.into_into_dart().into_dart(),
            self.transmission.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::Tokens {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::Tokens> for crate::api::Tokens {
    fn into_into_dart(self) -> crate::api::Tokens {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TransferProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::TransferProgress {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TransferProgress>
    for crate::api::TransferProgress
{
    fn into_into_dart(self) -> crate::api::TransferProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TransferStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::TransferStatus::Starting => [0.into_dart()].into_dart(),
            crate::api::TransferStatus::Downloading(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::TransferStatus::Uploading(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::TransferStatus::Processing => [3.into_dart()].into_dart(),
            crate::api::TransferStatus::Completed => [4.into_dart()].into_dart(),
            crate::api::TransferStatus::Failed => [5.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::TransferStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TransferStatus> for crate::api::TransferStatus {
    fn into_into_dart(self) -> crate::api::TransferStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TransmissionConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.enabled.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::TransmissionConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TransmissionConfig>
    for crate::api::TransmissionConfig
{
    fn into_into_dart(self) -> crate::api::TransmissionConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::TransmissionToken {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.token.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::TransmissionToken {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::TransmissionToken>
    for crate::api::TransmissionToken
{
    fn into_into_dart(self) -> crate::api::TransmissionToken {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::UpgradeProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.firmware_id.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::UpgradeProgress {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::UpgradeProgress>
    for crate::api::UpgradeProgress
{
    fn into_into_dart(self) -> crate::api::UpgradeProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::UpgradeStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::UpgradeStatus::Starting => [0.into_dart()].into_dart(),
            crate::api::UpgradeStatus::Uploading(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::UpgradeStatus::Restarting => [2.into_dart()].into_dart(),
            crate::api::UpgradeStatus::Completed => [3.into_dart()].into_dart(),
            crate::api::UpgradeStatus::Failed => [4.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::UpgradeStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::UpgradeStatus> for crate::api::UpgradeStatus {
    fn into_into_dart(self) -> crate::api::UpgradeStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::UploadProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bytes_uploaded.into_into_dart().into_dart(),
            self.total_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::UploadProgress {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::UploadProgress> for crate::api::UploadProgress {
    fn into_into_dart(self) -> crate::api::UploadProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::UtcDateTime {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::UtcDateTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::UtcDateTime> for crate::api::UtcDateTime {
    fn into_into_dart(self) -> crate::api::UtcDateTime {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::WifiNetworkConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.ssid.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
            self.preferred.into_into_dart().into_dart(),
            self.keeping.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::WifiNetworkConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::WifiNetworkConfig>
    for crate::api::WifiNetworkConfig
{
    fn into_into_dart(self) -> crate::api::WifiNetworkConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::WifiNetworksConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.networks.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::WifiNetworksConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::WifiNetworksConfig>
    for crate::api::WifiNetworksConfig
{
    fn into_into_dart(self) -> crate::api::WifiNetworksConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::WifiTransmissionConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tokens.into_into_dart().into_dart(),
            self.schedule.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::WifiTransmissionConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::WifiTransmissionConfig>
    for crate::api::WifiTransmissionConfig
{
    fn into_into_dart(self) -> crate::api::WifiTransmissionConfig {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::AddOrUpdatePortalStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.location_name, serializer);
        <String>::sse_encode(self.status_pb, serializer);
    }
}

impl SseEncode for crate::api::Authenticated {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::api::Tokens>::sse_encode(self.tokens, serializer);
    }
}

impl SseEncode for crate::api::BatteryInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.percentage, serializer);
        <f32>::sse_encode(self.voltage, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::DeployConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.location, serializer);
        <u64>::sse_encode(self.deployed, serializer);
        <crate::api::Schedule>::sse_encode(self.schedule, serializer);
    }
}

impl SseEncode for crate::api::DeploymentConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.start_time, serializer);
    }
}

impl SseEncode for crate::api::DeviceCapabilities {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.udp, serializer);
    }
}

impl SseEncode for crate::api::DomainMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::DomainMessage::PreAccount => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::DomainMessage::NearbyStations(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<crate::api::NearbyStation>>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::StationRefreshed(field0, field1, field2) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::StationConfig>::sse_encode(field0, serializer);
                <Option<crate::api::EphemeralConfig>>::sse_encode(field1, serializer);
                <String>::sse_encode(field2, serializer);
            }
            crate::api::DomainMessage::UploadProgress(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::TransferProgress>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::DownloadProgress(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::TransferProgress>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::FirmwareDownloadStatus(field0) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::FirmwareDownloadStatus>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::UpgradeProgress(field0) => {
                <i32>::sse_encode(6, serializer);
                <crate::api::UpgradeProgress>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::AvailableFirmware(field0) => {
                <i32>::sse_encode(7, serializer);
                <Vec<crate::api::LocalFirmware>>::sse_encode(field0, serializer);
            }
            crate::api::DomainMessage::RecordArchives(field0) => {
                <i32>::sse_encode(8, serializer);
                <Vec<crate::api::RecordArchive>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::DownloadProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.started, serializer);
        <f32>::sse_encode(self.completed, serializer);
        <usize>::sse_encode(self.total, serializer);
        <usize>::sse_encode(self.received, serializer);
    }
}

impl SseEncode for crate::api::EphemeralConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::DeploymentConfig>>::sse_encode(self.deployment, serializer);
        <Option<crate::api::TransmissionConfig>>::sse_encode(self.transmission, serializer);
        <Vec<crate::api::NetworkConfig>>::sse_encode(self.networks, serializer);
        <Option<crate::api::LoraConfig>>::sse_encode(self.lora, serializer);
        <crate::api::DeviceCapabilities>::sse_encode(self.capabilities, serializer);
        <Vec<u8>>::sse_encode(self.events, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::FirmwareDownloadStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::FirmwareDownloadStatus::Checking => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::FirmwareDownloadStatus::Downloading(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::DownloadProgress>::sse_encode(field0, serializer);
            }
            crate::api::FirmwareDownloadStatus::Offline => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::FirmwareDownloadStatus::Completed => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::FirmwareDownloadStatus::Failed => {
                <i32>::sse_encode(4, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::FirmwareInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.label, serializer);
        <i64>::sse_encode(self.time, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::api::LocalFirmware> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::LocalFirmware>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::ModuleConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::ModuleConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::NearbyStation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::NearbyStation>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::NetworkConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::NetworkConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::RecordArchive> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::RecordArchive>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::SensorConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::SensorConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::StationConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::StationConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::WifiNetworkConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::WifiNetworkConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::LocalFirmware {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.label, serializer);
        <i64>::sse_encode(self.time, serializer);
        <String>::sse_encode(self.module, serializer);
        <String>::sse_encode(self.profile, serializer);
    }
}

impl SseEncode for crate::api::LoraBand {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::LoraBand::F915Mhz => 0,
                crate::api::LoraBand::F868Mhz => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::LoraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.available, serializer);
        <crate::api::LoraBand>::sse_encode(self.band, serializer);
        <Vec<u8>>::sse_encode(self.device_eui, serializer);
        <Vec<u8>>::sse_encode(self.app_key, serializer);
        <Vec<u8>>::sse_encode(self.join_eui, serializer);
        <Vec<u8>>::sse_encode(self.device_address, serializer);
        <Vec<u8>>::sse_encode(self.network_session_key, serializer);
        <Vec<u8>>::sse_encode(self.app_session_key, serializer);
    }
}

impl SseEncode for crate::api::LoraTransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.band, serializer);
        <Option<Vec<u8>>>::sse_encode(self.app_key, serializer);
        <Option<Vec<u8>>>::sse_encode(self.join_eui, serializer);
        <Option<crate::api::Schedule>>::sse_encode(self.schedule, serializer);
    }
}

impl SseEncode for crate::api::ModuleConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.position, serializer);
        <String>::sse_encode(self.module_id, serializer);
        <String>::sse_encode(self.key, serializer);
        <Vec<crate::api::SensorConfig>>::sse_encode(self.sensors, serializer);
        <Option<Vec<u8>>>::sse_encode(self.configuration, serializer);
    }
}

impl SseEncode for crate::api::NearbyStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.device_id, serializer);
        <bool>::sse_encode(self.busy, serializer);
    }
}

impl SseEncode for crate::api::NetworkConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.index, serializer);
        <String>::sse_encode(self.ssid, serializer);
        <bool>::sse_encode(self.preferred, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::DeploymentConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::DeploymentConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::EphemeralConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::EphemeralConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::LoraConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::LoraConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::Schedule> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::Schedule>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::SensorValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::SensorValue>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::Tokens> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::Tokens>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::TransmissionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::TransmissionConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::PortalError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::PortalError::Authentication => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::PortalError::Connecting => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::PortalError::Other(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::RecordArchive {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.generation_id, serializer);
        <String>::sse_encode(self.path, serializer);
        <i64>::sse_encode(self.head, serializer);
        <i64>::sse_encode(self.tail, serializer);
    }
}

impl SseEncode for crate::api::Registered {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::api::Schedule {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::Schedule::Every(field0) => {
                <i32>::sse_encode(0, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::SensorConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.number, serializer);
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.full_key, serializer);
        <String>::sse_encode(self.calibrated_uom, serializer);
        <String>::sse_encode(self.uncalibrated_uom, serializer);
        <Option<crate::api::SensorValue>>::sse_encode(self.value, serializer);
        <Option<crate::api::SensorValue>>::sse_encode(self.previous_value, serializer);
    }
}

impl SseEncode for crate::api::SensorValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::UtcDateTime>::sse_encode(self.time, serializer);
        <f32>::sse_encode(self.value, serializer);
        <f32>::sse_encode(self.uncalibrated, serializer);
    }
}

impl SseEncode for crate::api::SolarInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.voltage, serializer);
    }
}

impl SseEncode for crate::api::StationConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.generation_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::api::FirmwareInfo>::sse_encode(self.firmware, serializer);
        <crate::api::UtcDateTime>::sse_encode(self.last_seen, serializer);
        <crate::api::StreamInfo>::sse_encode(self.meta, serializer);
        <crate::api::StreamInfo>::sse_encode(self.data, serializer);
        <crate::api::BatteryInfo>::sse_encode(self.battery, serializer);
        <crate::api::SolarInfo>::sse_encode(self.solar, serializer);
        <Vec<crate::api::ModuleConfig>>::sse_encode(self.modules, serializer);
    }
}

impl SseEncode for crate::api::StreamInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.size, serializer);
        <u64>::sse_encode(self.records, serializer);
    }
}

impl SseEncode for crate::api::Tokens {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.token, serializer);
        <crate::api::TransmissionToken>::sse_encode(self.transmission, serializer);
    }
}

impl SseEncode for crate::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.device_id, serializer);
        <crate::api::TransferStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::api::TransferStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::TransferStatus::Starting => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::TransferStatus::Downloading(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::DownloadProgress>::sse_encode(field0, serializer);
            }
            crate::api::TransferStatus::Uploading(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::UploadProgress>::sse_encode(field0, serializer);
            }
            crate::api::TransferStatus::Processing => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::TransferStatus::Completed => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::TransferStatus::Failed => {
                <i32>::sse_encode(5, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::TransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.enabled, serializer);
    }
}

impl SseEncode for crate::api::TransmissionToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.token, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::UpgradeProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.device_id, serializer);
        <i64>::sse_encode(self.firmware_id, serializer);
        <crate::api::UpgradeStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::api::UpgradeStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::UpgradeStatus::Starting => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::UpgradeStatus::Uploading(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::UploadProgress>::sse_encode(field0, serializer);
            }
            crate::api::UpgradeStatus::Restarting => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::UpgradeStatus::Completed => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::UpgradeStatus::Failed => {
                <i32>::sse_encode(4, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::UploadProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.bytes_uploaded, serializer);
        <u64>::sse_encode(self.total_bytes, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::UtcDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::WifiNetworkConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.index, serializer);
        <Option<String>>::sse_encode(self.ssid, serializer);
        <Option<String>>::sse_encode(self.password, serializer);
        <bool>::sse_encode(self.preferred, serializer);
        <bool>::sse_encode(self.keeping, serializer);
    }
}

impl SseEncode for crate::api::WifiNetworksConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::WifiNetworkConfig>>::sse_encode(self.networks, serializer);
    }
}

impl SseEncode for crate::api::WifiTransmissionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::Tokens>>::sse_encode(self.tokens, serializer);
        <Option<crate::api::Schedule>>::sse_encode(self.schedule, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
